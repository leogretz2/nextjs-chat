// functions for the AI to access

// async function confirmPurchase(symbol: string, price: number, amount: number) {
//   'use server'

//   const aiState = getMutableAIState<typeof AI>()

//   const purchasing = createStreamableUI(
//     <div className="inline-flex items-start gap-1 md:items-center">
//       {spinner}
//       <p className="mb-2">
//         Purchasing {amount} ${symbol}...
//       </p>
//     </div>
//   )

//   const systemMessage = createStreamableUI(null)

//   runAsyncFnWithoutBlocking(async () => {
//     await sleep(1000)

//     purchasing.update(
//       <div className="inline-flex items-start gap-1 md:items-center">
//         {spinner}
//         <p className="mb-2">
//           Purchasing {amount} ${symbol}... working on it...
//         </p>
//       </div>
//     )

//     await sleep(1000)

//     purchasing.done(
//       <div>
//         <p className="mb-2">
//           You have successfully purchased {amount} ${symbol}. Total cost:{' '}
//           {formatNumber(amount * price)}
//         </p>
//       </div>
//     )

//     systemMessage.done(
//       <SystemMessage>
//         You have purchased {amount} shares of {symbol} at ${price}. Total cost ={' '}
//         {formatNumber(amount * price)}.
//       </SystemMessage>
//     )

//     aiState.done({
//       ...aiState.get(),
//       messages: [
//         ...aiState.get().messages.slice(0, -1),
//         {
//           id: nanoid(),
//           role: 'function',
//           name: 'showStockPurchase',
//           content: JSON.stringify({
//             symbol,
//             price,
//             defaultAmount: amount,
//             status: 'completed'
//           })
//         },
//         {
//           id: nanoid(),
//           role: 'system',
//           content: `[User has purchased ${amount} shares of ${symbol} at ${price}. Total cost = ${
//             amount * price
//           }]`
//         }
//       ]
//     })
//   })

//   return {
//     purchasingUI: purchasing.value,
//     newMessage: {
//       id: nanoid(),
//       display: systemMessage.value
//     }
//   }
// }


// in the ui variable, createAI() from ai/rsc



//   function: {
  //     name: "insert_mbe_question",
  //     description:
  //       "Insert MBE question into the database. The input parameter object has a question attribute that contains all the relevant case context preceding the final question 'stem'",
  //     parameters: {
  //       type: "object",
  //       properties: {
  //         Document_title: { type: "string" },
  //         Doc_Lines_to_Delete: { type: "array", items: { type: "integer" } },
  //         Document_Date: { type: "string" },
  //         Publisher: { type: "string" },
  //         question_type: { type: "string", const: "MBE" },
  //         question: {
  //           type: "string",
  //           description:
  //             "The entire question from the document to be inserted (may include multiple paragraphs in the root of the question)",
  //         },
  //         answers: {
  //           type: "object",
  //           properties: {
  //             A: { type: "string" },
  //             B: { type: "string" },
  //             C: { type: "string" },
  //             D: { type: "string" },
  //           },
  //         },
  //         correct_answer: { type: "string" },
  //         answer_origin: { type: "string" },
  //         explanation: { type: "string" },
  //         explanation_origin: { type: "string" },
  //         difficulty_level: { type: "integer" },
  //         law_category_tags: { type: "array", items: { type: "string" } },
  //         topic: { type: "array", items: { type: "string" } },
  //       },
  //       required: [
  //         "Document_title",
  //         "Doc_Lines_to_Delete",
  //         "Document_Date",
  //         "Publisher",
  //         "question_type",
  //         "question",
  //         "answers",
  //         "correct_answer",
  //         "answer_origin",
  //         "explanation",
  //         "explanation_origin",
  //         "difficulty_level",
  //         "law_category_tags",
  //         "topic",
  //       ],
  //     },
  //   }
  // }
  // functions: {
  //   listStocks: {
  //     description: 'List three imaginary stocks that are trending.',
  //     parameters: z.object({
  //       stocks: z.array(
  //         z.object({
  //           symbol: z.string().describe('The symbol of the stock'),
  //           price: z.number().describe('The price of the stock'),
  //           delta: z.number().describe('The change in price of the stock')
  //         })
  //       )
  //     }),
  //     render: async function* ({ stocks }) {
  //       yield (
  //         <BotCard>
  //           <StocksSkeleton />
  //         </BotCard>
  //       )

  //       await sleep(1000)

  //       aiState.done({
  //         ...aiState.get(),
  //         messages: [
  //           ...aiState.get().messages,
  //           {
  //             id: nanoid(),
  //             role: 'function',
  //             name: 'listStocks',
  //             content: JSON.stringify(stocks)
  //           }
  //         ]
  //       })

  //       return (
  //         <BotCard>
  //           <Stocks props={stocks} />
  //         </BotCard>
  //       )
  //     }
  //   },
  //   showStockPrice: {
  //     description:
  //       'Get the current stock price of a given stock or currency. Use this to show the price to the user.',
  //     parameters: z.object({
  //       symbol: z
  //         .string()
  //         .describe(
  //           'The name or symbol of the stock or currency. e.g. DOGE/AAPL/USD.'
  //         ),
  //       price: z.number().describe('The price of the stock.'),
  //       delta: z.number().describe('The change in price of the stock')
  //     }),
  //     render: async function* ({ symbol, price, delta }) {
  //       yield (
  //         <BotCard>
  //           <StockSkeleton />
  //         </BotCard>
  //       )

  //       await sleep(1000)

  //       aiState.done({
  //         ...aiState.get(),
  //         messages: [
  //           ...aiState.get().messages,
  //           {
  //             id: nanoid(),
  //             role: 'function',
  //             name: 'showStockPrice',
  //             content: JSON.stringify({ symbol, price, delta })
  //           }
  //         ]
  //       })

  //       return (
  //         <BotCard>
  //           <Stock props={{ symbol, price, delta }} />
  //         </BotCard>
  //       )
  //     }
  //   },
  //   showStockPurchase: {
  //     description:
  //       'Show price and the UI to purchase a stock or currency. Use this if the user wants to purchase a stock or currency.',
  //     parameters: z.object({
  //       symbol: z
  //         .string()
  //         .describe(
  //           'The name or symbol of the stock or currency. e.g. DOGE/AAPL/USD.'
  //         ),
  //       price: z.number().describe('The price of the stock.'),
  //       numberOfShares: z
  //         .number()
  //         .describe(
  //           'The **number of shares** for a stock or currency to purchase. Can be optional if the user did not specify it.'
  //         )
  //     }),
  //     render: async function* ({ symbol, price, numberOfShares = 100 }) {
  //       if (numberOfShares <= 0 || numberOfShares > 1000) {
  //         aiState.done({
  //           ...aiState.get(),
  //           messages: [
  //             ...aiState.get().messages,
  //             {
  //               id: nanoid(),
  //               role: 'system',
  //               content: `[User has selected an invalid amount]`
  //             }
  //           ]
  //         })

  //         return <BotMessage content={'Invalid amount'} />
  //       }

  //       aiState.done({
  //         ...aiState.get(),
  //         messages: [
  //           ...aiState.get().messages,
  //           {
  //             id: nanoid(),
  //             role: 'function',
  //             name: 'showStockPurchase',
  //             content: JSON.stringify({
  //               symbol,
  //               price,
  //               numberOfShares
  //             })
  //           }
  //         ]
  //       })

  //       return (
  //         <BotCard>
  //           <Purchase
  //             props={{
  //               numberOfShares,
  //               symbol,
  //               price: +price,
  //               status: 'requires_action'
  //             }}
  //           />
  //         </BotCard>
  //       )
  //     }
  //   },
  //   getEvents: {
  //     description:
  //       'List funny imaginary events between user highlighted dates that describe stock activity.',
  //     parameters: z.object({
  //       events: z.array(
  //         z.object({
  //           date: z
  //             .string()
  //             .describe('The date of the event, in ISO-8601 format'),
  //           headline: z.string().describe('The headline of the event'),
  //           description: z.string().describe('The description of the event')
  //         })
  //       )
  //     }),
  //     render: async function* ({ events }) {
  //       yield (
  //         <BotCard>
  //           <EventsSkeleton />
  //         </BotCard>
  //       )

  //       await sleep(1000)

  //       aiState.done({
  //         ...aiState.get(),
  //         messages: [
  //           ...aiState.get().messages,
  //           {
  //             id: nanoid(),
  //             role: 'function',
  //             name: 'getEvents',
  //             content: JSON.stringify(events)
  //           }
  //         ]
  //       })

  //       return (
  //         <BotCard>
  //           <Events props={events} />
  //         </BotCard>
  //       )
  //     }
  //   }
  // }
// })